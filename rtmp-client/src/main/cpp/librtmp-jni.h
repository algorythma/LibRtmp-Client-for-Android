/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stddef.h>
#include <android/log.h>
#include "flvmuxer/xiecc_rtmp.h"
/* Header for class net_butterflytv_rtmp_client_RtmpClient */

#ifdef __cplusplus
#include <thread>
#include <stdint.h>

#else
#include <pthread.h>
#endif

#ifndef _Included_net_butterflytv_rtmp_client_RtmpClient
#define _Included_net_butterflytv_rtmp_client_RtmpClient
#ifdef __cplusplus
extern "C" {
#endif

extern pthread_key_t current_jni_env;

JavaVM *java_vm;
jobject cachedRtmpClientObj;

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    read
 * Signature: ([CI)I
 */
JNIEXPORT jint JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativeRead
  (JNIEnv *, jobject, jbyteArray, jint, jint, jlong);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    write
 * Signature: ([CI)I
 */
JNIEXPORT jint JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativeWrite
  (JNIEnv *, jobject, jcharArray, jint, jlong);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    seek
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_seek
  (JNIEnv *, jobject, jint);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    pause
 * Signature: (I)I
 */
JNIEXPORT bool JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativePause
  (JNIEnv *, jobject, jboolean, jlong);

/*
 * Class:     net_butterflytv_rtmp_client_RtmpClient
 * Method:    close
 * Signature: ()I
 */
JNIEXPORT void JNICALL Java_net_butterflytv_rtmp_1client_RtmpClient_nativeClose
  (JNIEnv *, jobject, jlong);


JNIEXPORT bool JNICALL
Java_net_butterflytv_rtmp_1client_RtmpClient_nativeIsConnected(JNIEnv *env, jobject instance, jlong);

static JNIEXPORT void JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_write_1flv_1header(JNIEnv *env, jobject instance,
                                                               jboolean is_have_audio,
                                                               jboolean is_have_video) {
    write_flv_header(is_have_audio, is_have_video);
}


static JNIEXPORT void JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_file_1open(JNIEnv *env, jobject instance,
                                                       jstring filename_) {
    const char *filename = (*env)->GetStringUTFChars(env, filename_, 0);

    flv_file_open(filename);

    (*env)->ReleaseStringUTFChars(env, filename_, filename);
}

static JNIEXPORT void JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_file_1close(JNIEnv *env, jobject instance) {

    flv_file_close();

}

JNIEXPORT jlong JNICALL
Java_net_butterflytv_rtmp_1client_RtmpClient_nativeAlloc(JNIEnv *env, jobject instance);

JNIEXPORT jint JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_read(JNIEnv *env, jobject instance, jbyteArray data_,
                                                 jint offset, jint size);
JNIEXPORT jint JNICALL
Java_net_butterflytv_rtmp_1client_RTMPMuxer_isConnected(JNIEnv *env, jobject instance);
void forwardDataCBToApp (char *data, int len);
void forwardFunctionCBToApp ();

/* Register this thread with the VM */
static JNIEnv *attach_current_thread (void) {
    JNIEnv *env;
    JavaVMAttachArgs args;

    __android_log_print (ANDROID_LOG_INFO, "RTMPCLIENT", "Attaching thread %p", pthread_self());

    args.version = JNI_VERSION_1_4;
    args.name = NULL;
    args.group = NULL;

#ifdef __cplusplus
    if (java_vm->AttachCurrentThread (&env, &args))
#else
    if ((*java_vm)->AttachCurrentThread (java_vm, &env, &args) < 0)
#endif
    {
        __android_log_print (ANDROID_LOG_ERROR, "RTMPCLIENT", "Failed to attach current thread");
        return NULL;
    }

    return env;
}

/* Unregister this thread from the VM */
static void detach_current_thread (void *env) {
    __android_log_print (ANDROID_LOG_INFO, "RTMPCLIENT", "Detaching thread %p", pthread_self ());

#ifdef __cplusplus
    java_vm->DetachCurrentThread();
#else
    (*java_vm)->DetachCurrentThread (java_vm);
#endif
}

/* Retrieve the JNI environment for this thread */
static JNIEnv *get_jni_env (void) {

    JNIEnv *env;
    if ((env = (JNIEnv *)pthread_getspecific (current_jni_env)) == NULL) {
        env = attach_current_thread ();
        pthread_setspecific (current_jni_env, env);
    }

    return env;
}
#endif
